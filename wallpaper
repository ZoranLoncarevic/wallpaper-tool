#!/bin/bash
# Copyright (C) 2018 Zoran Loncarevic

arg0=${0##*/}
cache_type=2
DEFAULT_WALLPAPER="${DEFAULT_WALLPAPER:-/usr/share/backgrounds/Green_by_Alan_Mattila.jpg}"
CACHE_DIR=~/.wallpaper/cache

declare -a the_recipe=()

usage() {
	cat >&2 << EOF_USAGE
usage: wallpaper command ...

Commands:
  set         -- set new wallpaper
  dim         -- dim...
  blur        -- blur...
  tint        -- tint current wallpaper
  next        -- change to next wallpaper
  prev        -- change to preious wallpaper
  browse      -- browse wallpapers
  getfilename -- print current wallpaper filename
EOF_USAGE
}

report_error() {
	echo "$arg0: $2" >&2
	exit $1
}

debug_log() {
	echo "$@" >&2
}

get_current_wallpaper_filename()
{
	echo $(gconftool --get /desktop/gnome/background/picture_filename)
}

set_current_wallpaper()
{
	gconftool -t str --set /desktop/gnome/background/picture_filename "$1"
}

extract_arg() {
	case $1 in
		(*:*) echo ${1#*:} ;;
		(*)   echo ;;
	esac
}

cache2_to_cache1()
{
	local cache2=${1:-$(</dev/stdin)}
	if [[ $cache_type == 2 ]] &&
	   [[ "$cache2" =~ ^${CACHE_DIR/#\~/$HOME}/images/* ]]; then
		cache2=($(head "$CACHE_DIR/refs/${cache2##*/}")) ||
			report_error 7 "Internal cache error"
	fi
	echo "$cache2"
}

cache1_to_cache2()
{
	local cache1=${1:-$(</dev/stdin)}
	if [[ $cache_type == 2 ]] &&
	   [[ "$cache1" =~ .*/\.wall-cache/[^/]*__[^/]*$ ]]; then
		sha1=($(sha1sum <<<"$cache1"))
		cache1=${CACHE_DIR/#\~/$HOME}/images/$sha1
	fi
	echo "$cache1"
}

commit_to_cache2()
{
	echo "$1" >  "$CACHE_DIR/refs/${2##*/}" ||
		report_error 8 "Can't write to cache"
}

blur()
{
	debug_log convert "$1" -resize 50% -blur 0x${3:-5} -resize 200% "png:$2"
	convert "$1" -resize 50% -blur 0x${3:-5} -resize 200% "png:$2"
}

dim()
{
	debug_log convert "$1" -fill black -colorize ${3:-40}% "png:$2"
	convert "$1" -fill black -colorize ${3:-40}% "png:$2"
}

tint()
{
	IFS=':' read -r -a params <<< "$3"
	debug_log convert "$1" -fill "'rgb(${params[0]},${params[1]},${params[2]})'" \
		-colorize ${params[3]:-40}% "png:$2"
	convert "$1" -fill "rgb(${params[0]},${params[1]},${params[2]})" \
		-colorize ${params[3]:-40}% "png:$2"
}

ensure_cache_exists()
{
	case $cache_type in

		1)	if [[ ! -d "${1%/*}/.wall-cache" ]]; then
				mkdir "${1%/*}/.wall-cache" ||
					report_error 6 "Couldn't create cache in ${1%/*}"
			fi ;;

		2)	if [[ ! -d "${CACHE_DIR}/images" ]] ||
			   [[ ! -d "${CACHE_DIR}/refs" ]]; then
				mkdir -p "${CACHE_DIR}/images"
				mkdir -p "${CACHE_DIR}/refs"
			fi ;;
	esac
}

recipe_to_cachename() {
	local filename filter

	if [[ $1 == 0 ]]; then
		filename=$2
	else
		if [[ "$2" =~ /.wall-cache/[^/]*$ ]]; then
			filename=$2+
		else
			filename=${2%/*}/.wall-cache/${2##*/}__
		fi

		filename+=${the_recipe[0]}
		for filter in "${the_recipe[@]:1:$(($1-1))}"; do
			filename+="+$filter"
		done
	fi

	echo $filename
}

generate_image_from()
{
	ensure_cache_exists "$2"
	from=$(recipe_to_cachename $1 "$2" | cache1_to_cache2)
	for ((i=$1;i<${#the_recipe[@]};i++)); do
		to=$(recipe_to_cachename $(($i+1)) "$2")
		to1=$(cache1_to_cache2 "$to")
		${the_recipe[i]%%:*} "$from" "$to1" "$(extract_arg ${the_recipe[i]})"
		commit_to_cache2 "$to" "$to1"
		from=$to1
	done
}

ensure_image_is_cached()
{
	for ((i=${#the_recipe[@]};i>=0;i--)); do
		partial_result=$(recipe_to_cachename $i "$1" | cache1_to_cache2)
		if [[ -e "$partial_result" ]] &&
		   [[ ! "$partial_result" -ot "$1" ]]; then
			generate_image_from $i "$1"
			return 0
		fi
	done
	report_error 4 "Missing $partial_result."
}

extract_num() {
	if [[ $1 =~ ^[0-9:]+$ ]]; then
		echo ":$1"
		return 0
	else
		echo ""
		return 1
	fi
}

get_recipe() {
	while [[ $# -gt 0 ]]; do
		filter=$1
		case $filter in

			dim)	;&
			blur)	;&
			tint)
				argument=$(extract_num $2) && shift
				the_recipe+=("$filter$argument")
				shift
				;;
			*)
				report_error 2 "Invalid operation $filter"
				;;
		esac
	done
}

get_proposed_file() {
	local proposed_file=$1

	if [[ "${proposed_file^^}" == "CLIP" ]]; then
		proposed_file=$(xclip -o)
	fi
	if [[ "$proposed_file" == "default" ]]; then
		proposed_file="$DEFAULT_WALLPAPER"
	fi

	if [[ -e "$proposed_file" ]]; then
		proposed_file=$(realpath -s "$proposed_file" | cache2_to_cache1) || exit $?
		echo "$proposed_file"
	else
		report_error 1 "Image $proposed_file does not exists."
	fi
}

set_command()
{
	local wallpaper_file 

	wallpaper_file=$(get_proposed_file "$1") || exit $?
	shift ; get_recipe "$@"
	if (( ${#the_recipe[@]} > 0 )); then
		ensure_image_is_cached $wallpaper_file
		wallpaper_file=$(recipe_to_cachename ${#the_recipe[@]} \
						    "$wallpaper_file")
	fi
	wallpaper_file=$(cache1_to_cache2 "$wallpaper_file")
	set_current_wallpaper "$wallpaper_file"
}

if [[ $1 = -x ]]; then
	shift
	set -x
fi

case "$1" in

	set)
		shift
		set_command "$@"
		;;
	dim)	;&
	blur)	;&
	tint)
		set_command "$(get_current_wallpaper_filename)" "$@"
		;;

	getfilename)
		echo $(get_current_wallpaper_filename)
		;;
	browse)
		echo "Browse wallpapers."
		;;
	next)
		echo "Next wallpaper."
		;;
	prev)
		echo "Previous wallpaper."
		;;
	*)
		echo "Invalid command." >&2
		usage
		;;
esac
