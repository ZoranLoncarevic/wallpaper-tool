#!/bin/bash
# Copyright (C) 2018 Zoran Loncarevic

arg0=${0##*/}
cache_type=2
DEFAULT_WALLPAPER="${DEFAULT_WALLPAPER:-/usr/share/backgrounds/Green_by_Alan_Mattila.jpg}"
CACHE_DIR=~/.wallpaper/cache
TAG_DATABASE=~/.wallpaper/tags
TAG_QUERY_RESULT=~/.wallpaper/query-result

declare -a the_recipe=()
declare -a the_deps=()

usage() {
	cat >&2 << EOF_USAGE
usage: wallpaper command ...

Commands:
  set         -- set new wallpaper
  dim         -- dim...
  blur        -- blur...
  tint        -- tint current wallpaper
  next        -- change to next wallpaper
  prev        -- change to preious wallpaper
  browse      -- browse wallpapers
  getfilename -- print current wallpaper filename
  getrecipe   -- print current wallpaper recipe
  save        -- save current recipe
  tag         -- tag current wallpaper
EOF_USAGE
}

report_error() {
	echo "$arg0: $2" >&2
	exit $1
}

debug_log() {
	echo "$@" >&2
}

images_from_directory()
{
	local pattern=${2:-'*.png *.jpg *.recipe'}
	( cd "$1" && eval "ls $LS_FLAGS $pattern" ) 2>/dev/null
}

first_file_from_dir()
{
	images_from_directory "$1" | head -n 1
}

last_file_from_dir()
{
	images_from_directory "$1" | tail -n 1
}

IS_CACHE1()
{
	[[ "$1" =~ .*/\.wall-cache/[^/]*__.*$ ]]
}

IS_CACHE2()
{
	[[ "$1" =~ ^${CACHE_DIR/#\~/$HOME}/images/* ]]
}

HAS_SHUFFLE()
{
	[[ $1 =~ (__shuffle$|__.*\+shuffle$) ]]
}

get_current_wallpaper_filename()
{
	echo "$(gconftool --get /desktop/gnome/background/picture_filename)"
}

set_current_wallpaper()
{
	[[ ! $dry_run == yes ]] &&
	gconftool -t str --set /desktop/gnome/background/picture_filename "$1"
}

get_screen_resolution()
{
	echo "$(xdpyinfo | grep dimensions | sed -r 's/^[^0-9]*([0-9]+x[0-9]+).*$/\1/')"
}

swap_halfs_at()
{
	sed -n "0,/^$1\$/H ; /^$1\$/,\$p ; \${g;s/\n$1\$//;s/^\n//;p}"
}

make_link()
{
	if [[ ! -e "$2" ]]; then
		if IS_CACHE2 "$1"; then
			ln "$1" "$2"
		else
			ln -s "$1" "$2"
		fi
	fi
}

is_unmet_dependency_of()
{
	[[ ! -e "$1" ]] && return 0

	if [[ -h "$1" ]] || [[ -h "$2" ]]; then
		[[ "$(stat -c %Y "$1")" -lt \
		   "$(stat -c %Y "$2")" ]]
	else
		[[ "$1" -ot "$2" ]]
	fi

	[[ $? == 0 ]] && return 0

	if IS_CACHE2 "$1" &&
	   [[ -e "${1/images/deps}" ]]; then
		while IFS= read -r ; do
			if ! is_unmet_dependency_of "$REPLY" "$1" ||
			     HAS_SHUFFLE "$(cache2_to_cache1 "$REPLY")"; then
				return 0
			fi
		done < "${1/images/deps}"
	fi

	return 1
}

switch_in_progress_with_main()
{
	if [[ ! -z "$(ls -A "$1.in.progress")" ]]; then
		rm -rf "$1" &&
		mv "$1.in.progress" "$1" ||
			report_error 100 "Couldn't move $1.in.progress"
	else
		rmdir "$1.in.progress"
		report_error 101 "No matchig wallpapers."
	fi
}

urldecode() {
# urldecode <string>, https://gist.github.com/cdown/1163649

	if [[ "$1" =~ ^file:\/\/ ]]; then
		local url_encoded="${1#file:\/\/}"
		printf '%b' "${url_encoded//%/\\x}"
	else
		echo $1
	fi
}

remove_enclosing_quotes()
{
	if [[ "$1" =~ ^\"(.*)\"$ ]] ||
	   [[ "$1" =~ ^\'(.*)\'$ ]]; then
		echo "${BASH_REMATCH[1]}"
	else
		echo "$1"
	fi
}

extract_arg() {
	case $1 in
		(*:*) echo ${1#*:} ;;
		(*)   echo ;;
	esac
}

corner_to_gravity()
{
	local gravity geometry
	case ${1%%+*} in
		top)		gravity="-gravity North";;
		bottom)		gravity="-gravity South";;
		left)		gravity="-gravity West";;
		right)		gravity="-gravity East";;
		top_left)	gravity="-gravity NortWest";;
		top_right)	gravity="-gravity NortEast";;
		bottom_left)	gravity="-gravity SouthWest";;
		bottom_right)	gravity="-gravity SouthEast";;
		center)		gravity="-gravity Center";;
	esac

	geometry=$( grep -o "[+-][0-9]*[+-][0-9]*" <<< "$1")
	[[ ! -z "$geometry" ]] && geometry=" -geometry $geometry"

	if [[ -z "$gravity" ]]; then
		return 1
	else
		echo "$gravity$geometry"
		return 0
	fi
}

cache2_to_cache1()
{
	local cache2=${1:-$(</dev/stdin)}
	if [[ $cache_type == 2 ]] && IS_CACHE2 "$cache2"; then
		cache2=$(head "$CACHE_DIR/refs/${cache2##*/}") ||
			report_error 7 "Internal cache error"
	fi
	echo "$cache2"
}

cache1_to_cache2()
{
	local cache1=${1:-$(</dev/stdin)}
	if [[ $cache_type == 2 ]] && IS_CACHE1 "$cache1" ||
	   [[ "$cache1" =~ .recipe$ ]]; then
		sha1=($(sha1sum <<<"$cache1"))
		cache1=${CACHE_DIR/#\~/$HOME}/images/$sha1
	fi
	echo "$cache1"
}

commit_to_cache2()
{
	echo "$1" >  "$CACHE_DIR/refs/${2##*/}" ||
		report_error 8 "Can't write to cache"

	if [[ ! -e "$CACHE_DIR/deps/${2##*/}" ]] ||
	   [[ $1 =~ .recipe$ ]]; then
		for dep in "${the_deps[@]}"; do
			echo $dep >> "$CACHE_DIR/deps/${2##*/}"
		done
	fi
}

split_cache1_into_components()
{ #
	if IS_CACHE1 "$1"; then
		C1_FILE=${1%__*}
		C1_RECIPE=${1##*__}
	else
		C1_FILE=$1
		C1_RECIPE=""
	fi

	C1_DIR="${C1_FILE%/*}"
	C1_FILE="${C1_FILE##*/}"

	if IS_CACHE1 "$1"; then
		C1_DIR="${C1_DIR%/\.wall-cache}"
	fi
}

recompose_cache1()
{
	if [[ -z "$3" ]]; then
		echo "$1/$2"
	else
		echo "$1/.wall-cache/$2__$3"
	fi
}

get_current_wallpaper_cache1()
{
	if [[ -z "$C1_WALLPAPER" ]]; then
		C1_WALLPAPER=$(get_current_wallpaper_filename |
		                cache2_to_cache1)
	fi
	echo "$C1_WALLPAPER"
}

prepare_preview()
{
	local file
	mkdir -p "$TAG_QUERY_RESULT.in.progress"

	shift
	for file in "$@"; do
		file=$(urldecode "$file")
		ln -s "$(realpath -s "$file")" "$TAG_QUERY_RESULT.in.progress"
	done

	switch_in_progress_with_main "$TAG_QUERY_RESULT"
	echo "$TAG_QUERY_RESULT"
}

parse_string_like_bash()
{
	while IFS= read -r ; do
		recipe+=( "$REPLY" )
	done < <(xargs printf '%s\n' <<<$1)
}

transform_recipe()
{
	local recipe=$1 arg result=""

	while [[ ! -z "$recipe" ]]; do
		if [[ ! $recipe =~ [:+] ]]; then
			result+=$recipe
			recipe=""
		elif [[ $recipe =~ ^([^\"+:]*)[:+] ]]; then
			result+="${BASH_REMATCH[1]} "
			recipe=${recipe:${#BASH_REMATCH[0]}}
		elif [[ $recipe =~ ^\"(\\.|[^\\\"])*\" ]]; then
			result+=${BASH_REMATCH[0]}
			recipe=${recipe:${#BASH_REMATCH[0]}}
		else
			report_error 130 "Invalid recipe $1 in cache."
		fi
	done
	echo "$result"
}

get_current_wallpaper_recipe()
{
	local wallpaper=$( get_current_wallpaper_cache1 )

	if IS_CACHE1 "$wallpaper"; then
		split_cache1_into_components "$wallpaper"
		printf "set '%s' %s\n" "$C1_DIR/$C1_FILE" \
		                       "$(transform_recipe "$C1_RECIPE")"
	else
		printf "set '%s'\n" "$wallpaper"
	fi
}

browse_command()
{
	local target touched_wallpaper=""

	if [[ $# == 0 ]]; then
		target=$( get_current_wallpaper_cache1 )
	else
		target=$( TAG_QUERY_RESULT=$TAG_QUERY_RESULT.browse \
			  get_proposed_file "$@" ) || exit
	fi

	split_cache1_into_components "$target"
	cache_command "$C1_DIR" &

	images_from_directory "$C1_DIR" |
	swap_halfs_at "$C1_FILE" |
	while IFS= read -r ; do
		case "$REPLY" in
			*.recipe) echo "$(cache1_to_cache2 "$C1_DIR/$REPLY")" ;;
			*) [[ ! -z "$REPLY" ]] && echo "$C1_DIR/$REPLY"
		esac
	done |
	meh -list |
	while IFS= read -r ; do
		set_command "$REPLY"
	done

	if [[ "$C1_DIR" == "$TAG_QUERY_RESULT.browse" ]]; then
		touched_wallpaper=$( get_current_wallpaper_cache1 )
		if [[ "$touched_wallpaper" =~ ^$TAG_QUERY_RESULT.browse ]]; then
			rm -rf "$TAG_QUERY_RESULT"
			mv "$TAG_QUERY_RESULT.browse" "$TAG_QUERY_RESULT"
			set_command "${touched_wallpaper/$TAG_QUERY_RESULT.browse/$TAG_QUERY_RESULT}"
		fi
	fi
}

cache_command()
{
	if [[ -d "$1" ]]; then
		images_from_directory "$1" '*.recipe' |
		while IFS= read -r ; do
			ensure_recipe_is_cached "$(realpath -s "$1/$REPLY")"
		done
	else
		dry_run=yes set_command "$@"
	fi
}

tag_command()
{
	local recipe=$( get_current_wallpaper_recipe )
	local sha1=($(sha1sum <<<"$recipe"))

	while [[ $# -gt 0  ]]; do

		if [[ $1 =~ ^- ]]; then
			rm -f "$TAG_DATABASE/${1#-}/$sha1.recipe"
		else
			mkdir -p "$TAG_DATABASE/$1"
			echo "$recipe" > "$TAG_DATABASE/$1/$sha1.recipe"
		fi
		shift
	done
}

query_is_up_to_date()
{

	[[ -e "$TAG_QUERY_RESULT/$1" ]] ||
		return 1

	for tag in ${count[@]}; do
		[[ "$TAG_QUERY_RESULT/$1" -ot "$TAG_DATABASE/$tag" ]] &&
			return 2
	done
	return 0
}

query_by_tag()
{
	local tag count=( ${1//+/ } )

	if [[ ${#count[@]} == 1 ]]; then
		echo "$TAG_DATABASE/$count"
		return
	fi

	if ! query_is_up_to_date "$1"; then
#
		rm -rf "$TAG_QUERY_RESULT/$1"
		mkdir -p "$TAG_QUERY_RESULT/$1"
#
		(	for tag in ${1//+/ }; do
				ls "$TAG_DATABASE/$tag" 2>/dev/null
			done
#
		) | sort | uniq -c | sort -nr | grep "^ *${#count[@]}" | cut -c 9- |
		  xargs -d '\n' -I {} ln "$TAG_DATABASE/$count/{}" "$TAG_QUERY_RESULT/$1"
	fi

	echo "$TAG_QUERY_RESULT/$1"
}

find_next_available_name()
{
	local file="$1/$2.recipe"

	if [[ -e "$file" ]]; then
		for ((i=1;i<256;i++)); do
			[[ ! -e "$1/$2.$i.recipe" ]] &&
				break;
		done
		[[ $i -ge 256 ]] && report_error 12 "Too many recipes."
		file="$1/$2.$i.recipe"
	fi

	echo "$file"
}

save_command()
{
	local wallpaper=$(get_current_wallpaper_cache1) filename
	      C1_WALLPAPER=$wallpaper

	split_cache1_into_components "$wallpaper"
	if [[ ! -z "$C1_RECIPE" ]]; then
		filename=$(find_next_available_name "$C1_DIR" "$C1_FILE")
		get_current_wallpaper_recipe |
			sed 's/set ".*\//set "/'> $filename
		set_command "$filename"
	fi
}

skip_command()
{
	local current=$( get_current_wallpaper_cache1 )
	local dir file recipe="" wallpaper

	split_cache1_into_components "$current"
	dir=$C1_DIR; file=$C1_FILE

	wallpaper=$(images_from_directory "$dir" | (
			case $1 in
			   (next) sed -n "/^$file\$/{n;p;q}" ;;
			   (prev) sed -n "/^$file\$/{x;p;d;q}; x" ;;
			esac ) )

	if [[ "$wallpaper" == "" ]]; then
		case $1 in
		   (next) wallpaper=$( first_file_from_dir "$dir" ) ;;
	           (prev) wallpaper=$( last_file_from_dir "$dir" ) ;;
		esac
	fi

	set_command "$dir/$wallpaper"
}

delete_current_wallpaper()
{
	local current=$( get_current_wallpaper_cache1 )
	split_cache1_into_components "$current"
	local wallpaper_file="$C1_DIR/$C1_FILE"

	skip_command next
	rm -f "$wallpaper_file"
}

blur()
{
	debug_log convert "$1" -resize 50% -blur 0x${3:-5} -resize 200% "png:$2"
	convert "$1" -resize 50% -blur 0x${3:-5} -resize 200% "png:$2"
}

dim()
{
	debug_log convert "$1" -fill black -colorize ${3:-40}% "png:$2"
	convert "$1" -fill black -colorize ${3:-40}% "png:$2"
}

tint()
{
	IFS=':' read -r -a params <<< "$3"
	debug_log convert "$1" -fill "'rgb(${params[0]},${params[1]},${params[2]})'" \
		-colorize ${params[3]:-40}% "png:$2"
	convert "$1" -fill "rgb(${params[0]},${params[1]},${params[2]})" \
		-colorize ${params[3]:-40}% "png:$2"
}

flop()
{
	debug_log convert "$1" -flop "png:$2"
	convert "$1" -flop "png:$2"
}

crop()
{
	local gravity=$(corner_to_gravity "$3") \
	      resolution=$( get_screen_resolution )

	debug_log convert "$1" $gravity -crop $resolution+0+0 "png:$2"
	convert "$1" $gravity -crop $resolution+0+0 "png:$2"
}

fit()
{
	local resolution=$( get_screen_resolution ) color=${3:-0:0:0}

	color=${color//:/,}
	debug_log convert "$1" -resize $resolution\> \
		     -size $resolution "xc:rgb($color)" +swap -gravity center -composite "png:$2"
	convert "$1" -resize $resolution\> \
		     -size $resolution "xc:rgb($color)" +swap -gravity center -composite "png:$2"
}

resize()
{
	debug_log convert "$1" -resize $3 "png:$2"
	convert "$1" -resize $3 "png:$2"
}

shuffle()
{
	ln -s "$1" "$2"
}

compose()
{
	local layer trm corner recipe_string file recipe=()

	if [[ ! $3 =~ ([^:]*):([^:]*):(.*) ]]; then
		report_error 101 "compose: invalid argument."
	fi

	[[ ${BASH_REMATCH[1]} == "below" ]] && { layer="+swap"; trm="-trim"; }
	corner=$(corner_to_gravity "${BASH_REMATCH[2]}")
	file=$(cache1_to_cache2 "${aux_recipe[$4]}")
	the_deps+=( "$file" )

	debug_log convert "$1" $trm "$file" $corner $layer -composite "png:$2"
	convert "$1" $trm "$file" $corner $layer -composite "png:$2"
}

ensure_cache_exists()
{
	case $cache_type in

		1)	if [[ ! -d "${1%/*}/.wall-cache" ]]; then
				mkdir "${1%/*}/.wall-cache" ||
					report_error 6 "Couldn't create cache in ${1%/*}"
			fi ;;

		2)	if [[ ! -d "${CACHE_DIR}/images" ]] ||
			   [[ ! -d "${CACHE_DIR}/deps" ]] ||
			   [[ ! -d "${CACHE_DIR}/refs" ]]; then
				mkdir -p "${CACHE_DIR}/images"
				mkdir -p "${CACHE_DIR}/deps"
				mkdir -p "${CACHE_DIR}/refs"
			fi ;;
	esac
}

generate_image_from_cache1()
{
	local recipe=() recipestr

	split_cache1_into_components "$1"
	recipestr="set \"$C1_DIR/$C1_FILE\" $(transform_recipe "$C1_RECIPE")"

	parse_string_like_bash "$recipestr"
	( dry_run=yes set_command "${recipe[@]:1}" )
}

recipe_to_cachename() {
	local filename filter

	if [[ $1 == 0 ]]; then
		filename=$2
	else
		if IS_CACHE1 "$2"; then
			filename=$2+
		else
			filename=${2%/*}/.wall-cache/${2##*/}__
		fi

		filename+=${the_recipe[0]}
		for filter in "${the_recipe[@]:1:$(($1-1))}"; do
			filename+="+$filter"
		done
	fi

	echo $filename
}

apply_filter()
{
	local to=$(cache1_to_cache2 "$3")
	${the_recipe[$1]%%:*} "$2" "$to" "$(extract_arg "${the_recipe[$1]}")" $1 || exit $?
	commit_to_cache2 "$3" "$to"
	echo "$to"
}

generate_image_from()
{
	local i from to
	ensure_cache_exists "$2"
	from=$(recipe_to_cachename $1 "$2" | cache1_to_cache2)
	for ((i=$1;i<${#the_recipe[@]};i++)); do
		to=$(recipe_to_cachename $(($i+1)) "$2")
		from=$(apply_filter $i "$from" "$to") || exit $?
	done
}

ensure_image_is_cached()
{
	for ((i=${#the_recipe[@]};i>=0;i--)); do
		partial_result=$(recipe_to_cachename $i "$1" | cache1_to_cache2)
		if ! is_unmet_dependency_of "$partial_result" "$1"; then
			generate_image_from $i "$1"
			return 0
		fi
	done

	if IS_CACHE1 "$1"; then
		generate_image_from_cache1 "$1"
		generate_image_from 0 "$1"
	else
		report_error 4 "Missing $partial_result."
	fi
}

update_cache_with_recipe()
{
	local file=$(cache1_to_cache2 "$1")
	local sourcefile=$(cache1_to_cache2 "$2")

	make_link "$sourcefile" "$file"

	split_cache1_into_components "$2"
	echo "$C1_DIR/$C1_FILE" > "${file/images/deps}"
	if IS_CACHE2 "$sourcefile" &&
	   [[ -e "${sourcefile/images/deps}" ]]; then
		cat "${sourcefile/images/deps}" >> "${file/images/deps}"
	fi

	commit_to_cache2 "$1" "$file"
}

ensure_recipe_is_cached()
{
	[[ ! $1 =~ \.recipe$ ]] && return 0
	local recipe_string recipe=()
	local file=$(cache1_to_cache2 "$1")

	is_unmet_dependency_of "$file" "$1" || return 0

	[[ $(head "$1" -c 3) == set ]] ||
		return 11 # Invalid recipe

	recipe_string=$(head "$1" -n 1)
	parse_string_like_bash "$recipe_string"

	produced_file="$( cd "$(dirname $1)" || exit
			  dry_run=yes set_command "${recipe[@]:1}"
			  echo "$produced_file" )" || exit

	ensure_cache_exists "$1"
	update_cache_with_recipe "$1" "$produced_file"
}

extract_compose_arg()
{
	local count=1 layer="above" corner="" file

	while [[ $# -gt 0 ]]; do
		shift
		case $1 in
			above)	;&
			below)	layer=$1
				(( count++ ))
				continue
		esac
		corner_to_gravity "$1" > /dev/null &&
			{ corner=$1
			  (( count++ ))
			  continue; }
		break
	done
	echo ":$layer:$corner:$1"
	return $count
}

replace_primary()
{
	local recipe=()
	local recipestr argstr

	[[ "$1" =~ ^(:.*:.*:)(.*)$ ]] ||
		report_error 114 "Bad compose arg"

	recipestr=${BASH_REMATCH[2]}
	argsstr=${BASH_REMATCH[1]}
	
	recipestr=$(remove_enclosing_quotes "$recipestr")
	parse_string_like_bash "$recipestr"
	produced_file="$( dry_run=yes set_command "${recipe[@]}"
	                  echo "$produced_file" )" || exit
	
	aux_recipe[${#the_recipe[@]}]=$produced_file
	split_cache1_into_components "$produced_file"
	recipe[0]=\'"$C1_DIR/$C1_FILE"\'

	# We are assigning to a variable from parent function
	argument=$argsstr\"${recipe[@]}\"
}

extract_crop_arg()
{
	case $1 in
		top_left|top_right)		;&
		bottom_left|bottom_right)	;&
		top|bottom|left|right|center) 	echo ":$1"
						return 0;;

		*)				echo ""
						return 1;;
	esac
}

extract_num() {
	if [[ $1 =~ ^[0-9:]+$ ]]; then
		echo ":$1"
		return 0
	else
		echo ""
		return 1
	fi
}

get_recipe() {
	the_recipe=()
	aux_recipe=()
	while [[ $# -gt 0 ]]; do
		filter=$1
		case $filter in

			dim)	;&
			blur)	;&
			tint)	;&
			flop)	;&
			fit)
				argument=$(extract_num $2) && shift
				;;
			crop)
				argument=$(extract_crop_arg $2) && shift
				;;
			compose)
				argument=$(extract_compose_arg "$@") || shift $?
				replace_primary "$argument"
				;;
			resize)
				argument=:$2; shift
				;;
			shuffle)
				shuffle_status=yes
				shift
				continue
				;;
			*)
				report_error 2 "Invalid operation $filter"
				;;
		esac
		the_recipe+=("$filter$argument")
		shift
	done
}

load_shuffle_status()
{
	if IS_CACHE1 "$1" &&
	   HAS_SHUFFLE "$1"; then
		shuffle_status=yes
		return 0
	else
		shuffle_status=no
		return 1
	fi
}

shuffle_wallpaper()
{
	local wallpaper="$1"

	if IS_CACHE1 "$1"; then
		wallpaper=${1%%+shuffle}
		wallpaper=${wallpaper%%shuffle}
	fi

	# When recipe in $1 consists of the sole shuffle filter,
	# we leave dangling __ to make it appear as cache1 name
	# to split_cache1_into_components below, as remaining
	# wall-cache still needs to be removed from dir name.

	split_cache1_into_components "$wallpaper"
	wallpaper=$( recompose_cache1 "$C1_DIR" \
			              "$(images_from_directory "$C1_DIR" | shuf -n 1)" \
				      "$C1_RECIPE" )

	ensure_recipe_is_cached "$wallpaper"
	echo "$wallpaper"
}

get_proposed_file() {
	local proposed_file=$1

	if [[ "${proposed_file^^}" == "CLIP" ]]; then
		proposed_file=$(xclip -o)
	fi
	if [[ "$proposed_file" == "default" ]]; then
		proposed_file="$DEFAULT_WALLPAPER"
	fi
	if [[ "$proposed_file" =~ ^@ ]]; then
		proposed_file=$(query_by_tag ${proposed_file#@}) || exit
	fi
	if [[ "$proposed_file" == pick: ]]; then
		proposed_file=$(prepare_preview "$@")
	fi
	if [[ "$proposed_file" =~ file:// ]]; then
		proposed_file=$(urldecode "$proposed_file")
	fi
	if [[ -d "$proposed_file" ]]; then
		proposed_file+="/$(first_file_from_dir "$proposed_file")"
	fi

	if [[ ! -f "$proposed_file" ]]; then
		report_error 1 "Image $proposed_file does not exists."
	else
		proposed_file=$(realpath -s "$proposed_file") || exit $?
		if [[ "$proposed_file" =~ \.recipe$ ]]; then
			ensure_recipe_is_cached "$proposed_file" ||
			if [[ ! $dry_run == yes ]]; then
				report_error 19 "Invalid $proposed_file file."
			fi
		fi
		echo "$(cache2_to_cache1 "$proposed_file")"
	fi
}

set_command()
{
	local wallpaper_file 
	the_deps=()

	wallpaper_file=$(get_proposed_file "$@") || exit $?
	if [[ ! "$1" == pick: ]]; then
		load_shuffle_status "$wallpaper_file"
		shift ; get_recipe "$@"
		if [[ $shuffle_status == yes ]]; then
			the_recipe+=("shuffle")
			wallpaper_file=$(shuffle_wallpaper "$wallpaper_file")
		fi
	fi
	if (( ${#the_recipe[@]} > 0 )); then
		ensure_image_is_cached "$wallpaper_file"
		wallpaper_file=$(recipe_to_cachename ${#the_recipe[@]} \
						    "$wallpaper_file")
	fi
	produced_file=$wallpaper_file
	wallpaper_file=$(cache1_to_cache2 "$wallpaper_file")
	set_current_wallpaper "$wallpaper_file"
}

LS_FLAGS="-tL"
dry_run=""
unset CDPATH

if [[ $1 = -x ]]; then
	shift
	set -x
fi

trap "trap - SIGTERM && pkill -P $$" SIGINT SIGTERM EXIT

case "$1" in

	set)
		shift
		set_command "$@"
		;;
	dim)	;&
	blur)	;&
	tint)	;&
	flop)	;&
	crop)	;&
	fit)	;&
	resize)	;&
	shuffle) ;&
	compose)
		set_command "$(get_current_wallpaper_filename)" "$@"
		;;

	getfilename)
		echo $(get_current_wallpaper_filename)
		;;
	getrecipe)
		echo "$(get_current_wallpaper_recipe)"
		;;
	cache)
		shift
		cache_command "$@"
		;;
	save)
		save_command "$@"
		;;
	tag)
		shift
		tag_command "$@"
		;;
	browse)
		shift
		browse_command "$@"
		;;
	next)
		skip_command next
		;;
	prev)
		skip_command prev
		;;
	delete)
		delete_current_wallpaper
		;;
	*)
		echo "Invalid command." >&2
		usage
		;;
esac
